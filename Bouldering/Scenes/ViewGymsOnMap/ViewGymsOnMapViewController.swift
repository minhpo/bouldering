//
//  ViewGymsOnMapViewController.swift
//  Bouldering
//
//  Created by Po Sam on 23/12/2017.
//  Copyright (c) 2017 Mobairu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

protocol ViewGymsOnMapDisplayLogic: class {
    func display(viewModels: [GymPoiViewModel])
}

class ViewGymsOnMapViewController: UIViewController, ViewGymsOnMapDisplayLogic {
    
    var interactor: ViewGymsOnMapBusinessLogic?
    var router: (NSObjectProtocol & ViewGymsOnMapRoutingLogic & ViewGymsOnMapDataPassing)?
    
    @IBOutlet weak var mapView: MKMapView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ViewGymsOnMapInteractor(gymsRepository: ServiceLocator.default.gymsRepository)
        let presenter = ViewGymsOnMapPresenter()
        let router = ViewGymsOnMapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        interactor?.start()
    }
    
    // MARK: Do something
    
    func display(viewModels: [GymPoiViewModel]) {
        let annotations = viewModels.map { viewModel -> MKAnnotation in
            let annotation = MKPointAnnotation()
            annotation.title = viewModel.name
            annotation.coordinate = CLLocationCoordinate2D(latitude: viewModel.latitude, longitude: viewModel.longitude)
            
            return annotation
        }
        
        self.mapView.addAnnotations(annotations)
    }
    
}
